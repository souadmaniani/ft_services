apiVersion: v1
kind: Service
metadata:
  annotations:
    metallb.universe.tf/allow-shared-ip: shared
  name: wordpress
spec:
  selector:
    app: wordpress
  ports:
    - name: port-wordpress
      protocol: TCP
      port: 5050
      targetPort: 5050
  type: LoadBalancer
---
# kind: PersistentVolumeClaim
# apiVersion: v1
# metadata:
#     name: wp-pvc
# spec:
#     accessModes:
#       - ReadWriteOnce
#     resources:
#       requests:
#         storage: 6Gi
# ---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      restartPolicy: Always
      # les volumes à fournir au Pod (le champ .spec.volumes)
      #  et où les monter dans les conteneurs (le champ .spec.containers.volumeMounts).
      # volumes:
      # - name: wordpress-persistent-storage
      #   persistentVolumeClaim:
      #     claimName: wp-pvc
      containers:
      - name: wordpress
        image: my_wordpress
        imagePullPolicy: Never
        # The WORDPRESS_DB_HOST environment 
        # variable sets the name of the MySQL Service defined 
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_PASSWORD
          value : souad
        ports:
        - containerPort: 5050
        livenessProbe:
          exec:
            command:
            - sh
            - /script.sh
          initialDelaySeconds: 5
          periodSeconds: 5
        # volumeMounts:
        # - mountPath: "/var/www/localhost/htdocs/wordpress"
        #   name: wordpress-persistent-storage

# Premièrement, lorsqu'un conteneur plante, kubelet va le redémarrer mais les fichiers
# seront perdus - le conteneur démarre avec un état propre. Deuxièmement, lorsque plusieurs
# conteneurs s'exécutent ensemble dans un Pod, il est souvent nécessaire de partager
# des fichiers entre ces conteneurs. L'abstraction Kubernetes Volume résout ces deux problèmes.
# ---> Un PersistentVolumeClaim (PVC) est une demande de stockage par un utilisateur.
# Il est similaire à un Pod